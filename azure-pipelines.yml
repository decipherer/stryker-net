name: $(PackageVersion).$(VersionBuildNumber)

trigger:
  batch: true
  branches:
    include:
    - refs/heads/master
    - refs/tags/*

resources:
- repo: self
  clean: true
  
variables:
  PackageVersion: '0.9.0'
  VersionBuildNumber: $[counter('0.9.0', 1)]
  PreReleaseVersion: $(PackageVersion)-beta.$(VersionBuildNumber)
  ProjectsToPack: src/Stryker.Core/Stryker.Core/Stryker.Core.csproj;src/Stryker.CLI/Stryker.CLI/Stryker.CLI.csproj
  PreReleaseFeed: https://www.myget.org/F/stryker-mutator-integrationtest
  PreReleaseFeedUri: https://www.myget.org/F/stryker-mutator-integrationtest/api/v3/index.json

jobs:
- job: PublishPreRelease
  displayName: Prepare Pre-Release package

  pool:
    name: Hosted VS2017
  
  steps:
  - task: NuGetCommand@2
    displayName: 'Restore vstest binaries for pre-release'
    inputs:
      restoreSolution: src/Stryker.Core/Stryker.Core/ToolHelpers/packages.vstest.config
      feedsToUse: config
      nugetConfigPath: src/Stryker.Core/Stryker.Core/ToolHelpers/nuget.vstest.config
      restoreDirectory: src/Stryker.Core/Stryker.Core/ToolHelpers/.vstest/

  - task: DotNetCoreCLI@2
    displayName: 'Pack pre-release packages'
    inputs:
      command: pack
      versioningScheme: byEnvVar
      versionEnvVar: PreReleaseVersion
      packagesToPack: $(ProjectsToPack)
      packDirectory: $(Build.ArtifactStagingDirectory)/pre-release

  - task: DotNetCoreCLI@2
    displayName: 'Publish pre-release packages'
    inputs:
      command: custom
      custom: 'nuget'
      arguments: 'push *stryker*$(PreReleaseVersion).nupkg -s $(PreReleaseFeed) -k $(PreReleaseFeedKey)'
      workingDirectory: '$(Build.ArtifactStagingDirectory)/pre-release'
      
- job: WaitOnMyGetProcessing
  displayName: Wait on pre-release packages to be processed on MyGet
  dependsOn: PublishPreRelease
  
  pool: 
    name: server
  
  steps:
  - task: Delay@1
    inputs:
     delayForMinutes: '2' 

- job: WindowsTests
  displayName: Run tests on Windows
  dependsOn: WaitOnMyGetProcessing
  condition: succeeded()

  pool:
    name: Hosted VS2017
  
  steps:
  - template: pipeline-templates/prepare-integration-test-steps.yml
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'windows-netstandard'
      workingDirectory: 'integrationtest/TargetProjects/NetStandardTestProject.XUnit'
      strykerCommands: '--dev-mode'
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'windows-netcore'
      workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
      strykerCommands: '--dev-mode -tr vstest -l trace'    
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'windows-netframework'
      workingDirectory: 'integrationtest/TargetProjects/NetFramework/FullFrameworkApp.Test'
      strykerCommands: '--dev-mode -tr vstest -l trace'  
  - task: DotNetCoreCLI@2
    displayName: 'Assert integration test results'
    inputs:
      command: test
      projects: '$(IntegrationTestPath)/ValidationProject/Validation.csproj'
      workingDirectory: $(IntegrationTestPath)


- job: LinuxTests
  displayName: Run tests on Linux
  dependsOn: WaitOnMyGetProcessing
  condition: succeeded()
  
  pool:
    name: Hosted Ubuntu 1604
  
  steps:
  - template: pipeline-templates/prepare-integration-test-steps.yml
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'linux-netstandard'
      workingDirectory: 'integrationtest/TargetProjects/NetStandardTestProject.XUnit'
      strykerCommands: '--dev-mode -tr vstest'
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'linux-netcore'
      workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
      strykerCommands: '--dev-mode'  
  - task: DotNetCoreCLI@2
    displayName: 'Assert integration test results'
    inputs:
      command: test
      projects: '$(IntegrationTestPath)/ValidationProject/Validation.csproj'
      workingDirectory: $(IntegrationTestPath)

- job: MacOsTests
  displayName: Run tests on Mac OS
  dependsOn: WaitOnMyGetProcessing
  condition: succeeded()
  
  pool:
    name: Hosted macOS
  
  steps:
  - template: pipeline-templates/prepare-integration-test-steps.yml
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'macos-netstandard'
      workingDirectory: 'integrationtest/TargetProjects/NetStandardTestProject.XUnit'
      strykerCommands: '--dev-mode'
  - template: pipeline-templates/run-integration-test-steps.yml
    parameters:
      testName: 'macos-netcore'
      workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
      strykerCommands: '--dev-mode -tr vstest'  
  - task: DotNetCoreCLI@2
    displayName: 'Assert integration test results'
    inputs:
      command: test
      projects: '$(IntegrationTestPath)/ValidationProject/Validation.csproj'
      workingDirectory: $(IntegrationTestPath)

- job: PublishRelease
  displayName: Publish Release Artifacts
  dependsOn: 
  - WindowsTests
  - LinuxTests
  - MacOsTests
  condition: and(succeeded(), eq(variables['build.sourcebranch'], 'refs/heads/master'))

  pool:
    name: Hosted VS2017
  
  steps:
  - task: NuGetCommand@2
    displayName: 'Restore vstest binaries for release'
    inputs:
      restoreSolution: src/Stryker.Core/Stryker.Core/ToolHelpers/packages.vstest.config
      feedsToUse: config
      nugetConfigPath: src/Stryker.Core/Stryker.Core/ToolHelpers/nuget.vstest.config
      restoreDirectory: src/Stryker.Core/Stryker.Core/ToolHelpers/.vstest/

  - task: DotNetCoreCLI@2
    displayName: 'Pack release package'
    inputs:
      command: pack
      packagesToPack: $(ProjectsToPack)
      packDirectory: $(Build.ArtifactStagingDirectory)/release

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/release
